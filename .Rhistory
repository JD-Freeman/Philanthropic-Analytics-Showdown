data(trees)
data()
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
>c
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-list.files
old.dir<-getwd()
dir.create(testdir)
?dir.create
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
file.path('folder1')
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink('testdir2',recursive=TRUE)
setwd(old.dir)
unlink('testdir',recursive=true)
unlink('testdir',recursive=TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num
num_vect>=6
my_char<-c("My ","name ","is")
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"JDF")
my_name
my_name<-c(my_name,"JDF")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
(my_data == NA) == is.na(my_data)
my_data == NA
sum(my_na)
my_data
0/0
Inf-INf
Inf-Inf
x
x[1;10]
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[1is.na(x) & x>0]
x[1is.na(x) & x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,My_matrix2)
identical(my_matrix,my_matrix2)
patients<-C("Bill","Gina","Kelly",Sean)
patients<-C("Bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-("patient","age","weight","bp","rating","test")
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames<-c(cnames,patients)
colnames(my_data)<-cnames
my_data
print("Hello Grader! This is a screenshot to fulfill the project requirement for Coursera's 'The Data Scientist's Toolbox'")
date()
mkdir data
mkdir ../data
?mkdir
?cd
?pwd
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.2/library")
install.packages("KernSmooth")
setwd("~/Talks/Philanthropic Analyics Showdown/push to github/Philanthropic-Analytics-Showdown")
> library("randomForest", lib.loc="~/R/win-library/3.1")
> library("foreach", lib.loc="~/R/win-library/3.1")
> library("doParallel", lib.loc="~/R/win-library/3.1")
setwd("~/Talks/Philanthropic Analyics Showdown/push to github/Philanthropic-Analytics-Showdown")
model <- read.csv("model.csv")
response <- as.factor(model$TARGET_B)
predictors <- read.csv('predictors.csv')
library("e1071", lib.loc="~/R/win-library/3.1")
dataframe <- data.frame(x=predictors, y=response)
svmfit <- svm(y~., data=dataframe, kernel="radial", gamma=1, cost=1)
str(svmfit)
svmresult <- svmfit$fitted
tune.out=tune(svm, y~.,dat=dataframe, kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
summary(tune.out)
svmfit <- svm(y~., data=dataframe, kernel="radial", gamma=.5, cost=100)
plot(svmfit,dataframe[response,])
plot(svmfit)
plot(svmfit,model[response])
plot(svmfit,dataframe)
trainingresponse <-read.csv("trainingresponse.csv")
trainingpredictors <-read.csv("trainingpredictors.csv")
svmfit <- (svm(trainingresponse~., data=trainingpredictors, kernel = "radial", gamma = 1, cost = 100))
trainingresponse <- as.Factor(trainingresponse)
trainingresponse <- as.factor(trainingresponse)
?svmfit
?svm
trainingpredictors <- as.matrix(trainingpredictors)
trainingresponse <- as.factor(trainingresponse)
class(trainingresponse)
trainingresponse <-as.vector(trainingresponse)
svmfit <- (svm(trainingpredictors, trainingresponse, kernel = "radial", gamma = 1, cost = 100))
plot(svmfit)
plot(svmfit,trainingresponse)
summary(svmfit)
svmfit <- (svm(trainingpredictors, trainingresponse, kernel = "radial", gamma = 1, cost = 1))
plot(svmfit)
plot(svmfit,trainingresponse)
summary(svmfit)
str(svmfit)
training <- read.csv("training.csv")
plot(svmfit,training)
View(training)
View(training)
plot(svmfit,training,ZIPGROUP~X_LN_AVGGIFT)
library("MASS", lib.loc="C:/Program Files/R/R-3.1.3/library")
data(cats,package="MASS")
data(iris)
library("datasets", lib.loc="C:/Program Files/R/R-3.1.3/library")
detach("package:datasets", unload=TRUE)
library("datasets", lib.loc="C:/Program Files/R/R-3.1.3/library")
data(iris)
m2 <- svm(Species~., data=iris)
View(iris)
View(iris)
plot(m2, iris)
plot (m2, iris, Petal.Width ~ Petal.Length)
training <- read.csv("training")
training <- read.csv("training.csv")
View(training)
View(training)
svmfit <- svm(TARGET_B~.,data=training)
plot(svmfit,training,ZIPGROUP~zipconvert_2)
plot(svmfit,training,ZIPGROUP~zipconvert_2)
plot(svmfit,training,ZIPGROUP~LN_totalmonths)
tune.out=tune(svm, TARGET_B.,training, kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
tune.out=tune(svm, TARGET_B~.,training, kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
tune.out=tune(svm, TARGET_B~.,training, kernel="radial", ranges=list(cost=c(0.1,1,10,100),gamma=c(0.5,1,2,3,4)))
tune.out=tune(svm, TARGET_B~.,training, kernel="radial", ranges=list(cost=c(0.1,1,10),gamma=c(0.5,1,2,3,4)))
tune.out=tune(svm, TARGET_B~.,training, kernel="radial", ranges=list(cost=c(0.1,1,10),gamma=c(0.5,1,2)))
str(svmfit)
tune.out=tune(svm, TARGET_B~.,training, kernel="radial")
str(svmfit)
svm.formula
testing <- read.csv("testing.csv")
predict(svm,testing)
testing <- as.function(testing)
predict(svm,testing)
class(training)
predict(svmfit,testing)
class(testing)
rm testing
rm(testing)
testing <- read.csv('testing.csv')
predict(svmfit,testing)
trainsvmresult <- svmfit$fitted
testsvmresult <- predict(svmfit,testing)
write.csv(trainsvmresult, file = "trainsvmresult.csv", row.names = FALSE)
write.csv(testsvmresult, file = "testsvmresult.csv", row.names = FALSE)
testsvmresult
write.csv(testsvmresult, file = "testsvmresult.csv")
write.csv(testsvmresult, file = "testsvmresult.csv")
trainsvmresult
write.csv(trainsvmresult, file = "trainsvmresult.csv")
